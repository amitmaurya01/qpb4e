# -*- coding: utf-8 -*-
"""Chapter_06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/nceder/qpb4e/blob/main/code/Chapter%2006/Chapter_06.ipynb

# 6 Strings

# 6.1 Strings as sequences of characters
"""

x = "Hello"
x[0]

x[-1]

x[1:]

x = "Goodbye\n"
x = x[:-1]
x

len("Goodbye")

"""# 6.2 Basic string operations"""

x = "Hello " + "World"
x

8 * "x"

"""# 6.3 Special characters and escape sequences

## 6.3.2 Numeric (octal and hexadecimal) and Unicode escape sequences
"""

'm'

'\155'

'\x6D'

'\n'

'\012'

'\x0A'

unicode_a ='\N{LATIN SMALL LETTER A}'           #A
unicode_a

unicode_a_with_acute = '\N{LATIN SMALL LETTER A WITH ACUTE}'
unicode_a_with_acute

"\u00E1"                    #B

"""## 6.3.3 Printing vs. evaluating strings with special characters"""

'a\n\tb'

print('a\n\tb')

print("abc\n")

print("abc\n", end="")

"""# 6.4 String methods

## 6.4.1 The split and join string methods

"""

" ".join(["join", "puts", "spaces", "between", "elements"])

"::".join(["Separated", "with", "colons"])

"".join(["Separated", "by", "nothing"])

x = "You\t\t can have tabs\t\n \t and newlines \n\n " \
               "mixed in"
x.split()

x = "Mississippi"
x.split("ss")

x = 'a b c d'
x.split(' ', 1)

x.split(' ', 2)

x.split(' ', 9)

"""### Quick Check: split and join
How could you use split and join to change all the whitespace in string x to dashes, such as changing "this is a test" to "this-is-a-test"?

"""



x = "this is a test"
"-".join(x.split())

"""## 6.4.2 Converting strings to numbers"""

float('123.456')

float('xxyy')

int('3333')

int('123.456')

int('10000', 8)

int('101', 2)

int('ff', 16)

int('123456', 6)

"""### Quick Check: Strings to Numbers
Which of the following will not be converted to numbers, and why?
```
int('a1')
int('12G', 16)
float("12345678901234567890")
int("12*2")
```

## 6.4.3 Getting rid of extra whitespace
"""

x = "  Hello,    World\t\t "
x.strip()

x.lstrip()

x.rstrip()

import string
string.whitespace

" \t\n\r\v\f"

x = "www.python.org"
x.strip("w")

x.strip("gor")

x.strip(".gorw")

x = "www.python.org"
x.removeprefix("www.")

x.removesuffix(".org")

"""### Quick Check: strip
If the string x equals "(name, date),\n", which of the following returns a string containing "name, date" ?
```
1. x.rstrip("),")
2. x.strip("),\n")
3. x.strip("\n)(,")
4. x.strip("\n)(,") will remove the newline as well as the comma and parentheses.
```

## 6.4.4 String searching
"""

x = "Mississippi"
x.find("ss")

x.find("zz")

x = "Mississippi"
x.find("ss", 3)

x.find("ss", 0, 3)

x = "Mississippi"
x.rfind("ss")

x = "Mississippi"
x.count("ss")

x = "Mississippi"
x.startswith("Miss")

x.startswith("Mist")

x.endswith("pi")

x.endswith("p")

x.endswith(("i", "u"))

"""## 6.4.5 Modifying strings"""

x = "Mississippi"
x.replace("ss", "+++")

x = "~x ^ (y % z)"
table = x.maketrans("~^()", "!&[]")
x.translate(table)

x = "~x ^ (y % z)"
table = x.maketrans("", "", "()~^%")
x.translate(table)

"""### Quick Check: String searching
If you want to see whether a line ends with the string "rejected", what string method would you use? Are there any other ways you could get the same result?

## 6.4.6 Modifying strings with list manipulations
"""

text = "Hello, World"
wordList = list(text)
wordList[6:] = []
wordList.reverse()
text = "".join(wordList)
print(text)

"""### Quick Check: Modifying strings
What would be a quick way to change all punctuation in a string to spaces?

"""



punct = str.maketrans("!.,:;-?", "       ")
x = "This is text, with: punctuation! Right?"
x.translate(punct)

"""# 6.4.7 Useful methods and constants"""

x = "123"
x.isdigit()

x.isalpha()

x = "M"
x.islower()

x.isupper()

"""### Try This: String operations
Suppose that you have a list of strings in which some (but not necessarily all) of the strings begin and end with the double quote character:
```
x = ['"abc"', 'def', '"ghi"', '"klm"', 'nop']
```
What code would you use on each element to remove just the double quotes?

"""



x = ['"abc"', 'def', '"ghi"', '"klm"', 'nop']
for item in x:
    print(item.strip('"'))

"""# 6.5 Converting from objects to strings"""

repr([1, 2, 3])

x = [1]
x.append(2)
x.append([3, 4])
'the list x is ' + repr(x)

repr(len)

"""# 6.6 Using the format method

## 6.6.1 The format method and positional parameters
"""

"{0} is the {1} of {2}".format("Ambrosia", "food", "the gods")

"{{Ambrosia}} is the {0} of {1}".format("food", "the gods")

"""## 6.6.2 The format method and named parameters"""

"{food} is the food of {user}".format(food="Ambrosia",
      user="the gods")

"{0} is the food of {user[1]}".format("Ambrosia",
         user=["men", "the gods", "others"])

"""## 6.6.3 Format specifiers"""

"{0:10} is the food of gods".format("Ambrosia")

"{0:{1}} is the food of gods".format("Ambrosia", 10)

"{food:{width}} is the food of gods".format(food="Ambrosia", width=10)

"{0:>10} is the food of gods".format("Ambrosia")

"{0:&>10} is the food of gods".format("Ambrosia")

"""### Quick Check: the format() method
What will be in x when the following snippets of code are executed?:
```
x = "{1:{0}}".format(3, 4)
x = "{0:$>5}".format(3)
x = "{a:{b}}".format(a=1, b=5)
x = "{a:{b}}:{0:$>5}".format(3, 4, a=1, b=5, c=10)
```

# String interpolation with f-strings
"""

value = 42
message = f"The answer is {value}"
print(message)

primes = [1, 2, 3, 5]
f"sum of first 4 primes is {sum(primes)}"

PI = 3.1415
print(f"PI is {PI:{10}.{2}}")

print(f"{PI=:{10}.{2}}")

primes = [1, 2, 3, 5]
f"sum of first 4 primes is {sum(primes)=}"

"""# 6.8 Formatting strings with %"""

"%s is the %s of %s" % ("Ambrosia", "food", "the gods")

"%s is the %s of %s" % ("Nectar", "drink", "gods")

"%s is the %s of the %s" % ("Brussels Sprouts", "food",
       "foolish")

x = [1, 2, "three"]
"The %s contains: %s" % ("list", x)

"Pi is <%-6.2f>" % 3.14159 # use of the formatting sequence: %–6.2f

"""## 6.8.2 Named parameters and formatting sequences"""

"%(PI).2f"

num_dict = {'e': 2.718, 'PI': 3.14159}
print("%(PI).2f - %(PI).4f - %(e).2f" % num_dict)

print("a")
print("b")

print("a", "b", "c")

print("a", "b", "c", sep="|")

print("a", "b", "c", end="\n\n")

"""### Quick Check: Formatting strings with %
What would be in the variable x after the following snippets of code have executed?
```
x = "%.2f" % 1.1111
x = "%(a).2f" % {'a':1.1111}
x = "%(a).08f" % {'a':1.1111}
```

# 6.9 Bytes
"""

unicode_a_with_acute = '\N{LATIN SMALL LETTER A WITH ACUTE}'
unicode_a_with_acute

xb = unicode_a_with_acute.encode()   #A
xb

xb += 'A'

xb.decode()

"""### Quick Check: Bytes
For which of the following kinds of data would you want to use a string? For which could you use bytes?
1. Data file storing binary data
2. Text in a language with accented characters
3. Text with only uppercase and lowercase roman characters
4. A series of integers no larger than 255

1. Data file storing binary data

   Bytes. Because the data is binary, you're more concerned with the contents as numbers rather than text. Therefore, it would make sense to use bytes.
2. Text in a language with accented characters

   String. Python 3 strings are Unicode, so they can handle accented characters.
3. Text with only uppercase and lowercase roman characters

   String. Strings should be used for all text in Python 3.
4. A series of integers no larger than 255

   Bytes. A byte is an integer no larger than 255, so the bytes type is perfect for storing integers like this.

### Lab 6: Preprocessing Text
In processing raw text, it's quite often necessary to clean and normalize the text before doing anything else. If you want to find the frequency of words in text, for example, you can make the job easier if, before you start counting, you make sure that everything is lowercase (or uppercase, if you prefer) and that all punctuation has been removed. It can also make things easier to break the text into a series of words.

In this lab, the task is to read an excerpt of the first chapter of Moby Dick, make sure that everything is one case, remove all punctuation, and write the words one per line to a second file. Again, because I haven’t yet covered reading and writing files, the code for those operations is supplied below.
Your task is to come up with the code to replace the commented lines in the sample below:
```
with open("moby_01.txt") as infile, open("moby_01_clean.txt", "w") as outfile:
    for line in infile:
        # make all one case
        # remove punctuation
        # split into words
        # write all words for line
        outfile.write(cleaned_words)
```

### Run the cell below to get the file moby_01.txt
"""

!wget https://raw.githubusercontent.com/nceder/qpb4e/main/code/Chapter%2006/moby_01.txt &> null  && echo Downloaded

# Create your solution in this cell

with open("moby_01.txt") as infile, open("moby_01_clean.txt", "w") as outfile:
    for line in infile:
        # make all one case
        # remove punctuation
        # split into words
        # write all words for line
        outfile.write(cleaned_words)

# Solution created by the author
import string

punct = str.maketrans("",  "", string.punctuation)

with open("moby_01.txt") as infile:
  with open("moby_01_clean.txt", "w") as outfile:
    for line in infile:
        # make all one case
        cleaned_line = line.lower()

        # remove punctuation
        cleaned_line = cleaned_line.translate(punct)

        # split into words
        words = cleaned_line.split()
        cleaned_words = "\n".join(words) + "\n"
        # write all words for line
        outfile.write(cleaned_words)

# prompt: For every line the file moby_01.txt, make everything lower case,
#         remove punctuation, and split into words,
#         and write the words one per line  to the file moby_01_clean.txt

import string

# Open the input and output files
with open('moby_01.txt', 'r') as f_in, open('moby_01_clean.txt', 'w') as f_out:
  for line in f_in:
    # Convert the line to lowercase
    line = line.lower()

    # Remove punctuation
    for char in string.punctuation:
      line = line.replace(char, '')

    # Split the line into words
    words = line.split()

    # Write the words to the output file
    f_out.write(' '.join(words) + '\n')

# Generated usinb CoPilot
# Prompt: or every line the file moby_01.txt, make everything lower case,
#         remove punctuation, and split into words.
#         Write the words one per line to the file moby_01_clean.txt.

import string

# Open the input file for reading
with open('moby_01.txt', 'r') as input_file:
    # Open the output file for writing
    with open('moby_01_clean.txt', 'w') as output_file:
        # Iterate over each line in the input file
        for line in input_file:
            # Convert the line to lowercase
            line = line.lower()

            # Remove punctuation from the line
            line = line.translate(str.maketrans('', '', string.punctuation))

            # Split the line into words
            words = line.split()

            # Write each word to the output file
            for word in words:
                output_file.write(word + '\n')