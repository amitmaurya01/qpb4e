# -*- coding: utf-8 -*-
"""Chapter_24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/nceder/qpb4e/blob/main/code/Chapter%2024/Chapter_24.ipynb

# 24 Exploring data

# 24.2.2 Installing pandas
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np

"""# 24.2.3 Data frames"""

grid = [[1,2,3], [4,5,6], [7,8,9]]
print(grid)

[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

import pandas as pd
df = pd.DataFrame(grid)
print(df)

df = pd.DataFrame(grid, columns=["one", "two", "three"] )
print(df)

print(df["two"])

print([x[1] for x in grid])

for x in df["two"]:
    print(x)

edges = df[["one", "three"]]
print(edges)

print(edges.add(2))

df['two'].value_counts()

"""# 24.3.1 Loading and saving data with pandas"""

!wget https://raw.githubusercontent.com/nceder/qpb4e/main/code/Chapter%2024/mars_data_01.json &> null  && echo mars_data_01.json Downloaded
!wget https://raw.githubusercontent.com/nceder/qpb4e/main/code/Chapter%2024/temp_data_01.csv &> null  && echo temp_data_01.csv Downloaded

mars = pd.read_json("mars_data_01.json")
print(mars)

temp = pd.read_csv("temp_data_01.csv", header=0, names=range(18), usecols=range(4,18))
print(temp)

temp = pd.read_csv("temp_data_01.csv", na_values=['Missing'])
print(temp)

"""### Saving data"""

df.to_csv("df_out.csv", index=False)    #A
!cat df_out.csv

df.to_json()     #A

"""## 24.3.2 Data cleaning with a data frame"""

temp = pd.read_csv("temp_data_01.csv", na_values=['Missing'], header=0, names=range(18), usecols=range(4,18))    #A
print(temp)

temp[17][0]

temp[17]=temp[17].str.strip("%")
temp[17][0]

temp[17] = pd.to_numeric(temp[17])
temp[17][0]

temp[17] = temp[17].div(100)
temp[17]

"""### Try this: Cleaning Data with and without pandas
Experiment with the operations. When the final column has been converted to a fraction, can you think of a way to convert it back to a string with the trailing percentage sign?

By contrast, load the same data into a plain Python list by using the `csv` module, and apply the same changes by using plain Python.

"""



"""# 24.4. 1 Merging data frames"""

!wget https://raw.githubusercontent.com/nceder/qpb4e/main/code/Chapter%2024/sales_calls.csv &> null  && echo sales_calls.csv Downloaded
!wget https://raw.githubusercontent.com/nceder/qpb4e/main/code/Chapter%2024/sales_revenue.csv &> null  && echo sales_revenue.csv Downloaded

calls = pd.read_csv("sales_calls.csv")
print(calls)

revenue = pd.read_csv("sales_revenue.csv")
print(revenue)

calls_revenue = pd.merge(calls, revenue, on=['Territory', 'Month'])
print(calls_revenue)

"""### Quick Check: Merging data sets
How would you go about merging two data sets like the ones in the Python example?

#### Discussion

f you're sure that you have exactly the same number of items in each set and that the items are in the right order, you could use the `zip()` function. Otherwise, you could create a dictionary, with the keys being something common between the two data sets, and then append the date by key from both sets.

## 24.4.2 Selecting data
"""

print(calls_revenue[calls_revenue.Territory==3])

print(calls_revenue[calls_revenue.Amount/calls_revenue.Calls>500])

calls_revenue['Call_Amount'] = calls_revenue.Amount/calls_revenue.Calls
print(calls_revenue)

"""### Quick Check: Selecting in Python
What Python code structure would you use to select only rows meeting certain conditions?

#### Solution

Youâ€™d probably use a list comprehension:

`selected = [x for x in old_list if <x meets selection criteria>]`

## 24.4.3 Grouping and aggregation
"""

print(calls_revenue.Calls.sum())
print(calls_revenue.Calls.mean())
print(calls_revenue.Calls.median())
print(calls_revenue.Calls.max())
print(calls_revenue.Calls.min())

print(calls_revenue[calls_revenue.Call_Amount >= calls_revenue.Call_Amount.median()])
print(calls_revenue.Call_Amount.median())

print(calls_revenue[['Month', 'Calls', 'Amount']].groupby(['Month']).sum())

print(calls_revenue[['Territory', 'Calls', 'Amount']].groupby(['Territory']).sum())

"""### Try This: Grouping and Aggregating
Experiment with pandas and the data in previous examples. Can you get the calls and amounts by both team member and month?

"""



# @title
calls_revenue[['Team member','Month', 'Calls', 'Amount']].groupby(['Team member','Month']).sum()

"""# 24.5 Plotting data"""

calls_revenue[['Territory', 'Calls']].groupby(['Territory']).sum().plot.bar()

"""### Try this: Plotting

Plot a line graph of the monthly average amount per call.
"""



# @title
calls_revenue[['Month', 'Call_Amount']].groupby(['Month']).mean().plot()

